
b1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000550  08000558  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000550  08000550  00001558  2**0
                  CONTENTS
  4 .ARM          00000000  08000550  08000550  00001558  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000550  08000558  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000554  08000554  00001554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000558  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000558  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017a8  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005af  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  000032e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004a  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd49  00000000  00000000  000035ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015f5  00000000  00000000  0000f303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003b931  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0004c229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac4  00000000  00000000  0004c2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0004cdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000200  00000000  00000000  0004cdf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000538 	.word	0x08000538

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000538 	.word	0x08000538

080001d4 <delay_ms>:
#define BUTTON_GPIO_PORT    GPIOC
#define BUTTON_GPIO_PIN     GPIO_Pin_13
#define BUTTON_PIN_NUM      13
#define BUTTON_RCC_CLOCK    RCC_AHB1Periph_GPIOC

void delay_ms(uint32_t time) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < time * 1600; i++) __NOP();
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e004      	b.n	80001ec <delay_ms+0x18>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80001e2:	bf00      	nop
}
 80001e4:	bf00      	nop
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80001f2:	fb02 f303 	mul.w	r3, r2, r3
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d3f2      	bcc.n	80001e2 <delay_ms+0xe>
}
 80001fc:	bf00      	nop
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <LED_init>:

static void LED_init(uint8_t outputType) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct;
    RCC_AHB1PeriphClockCmd(LED_RCC_CLOCK, ENABLE);
 8000216:	2101      	movs	r1, #1
 8000218:	2001      	movs	r0, #1
 800021a:	f000 f949 	bl	80004b0 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Pin = LED_GPIO_PIN;
 800021e:	2320      	movs	r3, #32
 8000220:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	733b      	strb	r3, [r7, #12]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000226:	2302      	movs	r3, #2
 8000228:	737b      	strb	r3, [r7, #13]

    if (outputType == GPIO_OType_PP) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d102      	bne.n	8000236 <LED_init+0x2a>
        GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000230:	2300      	movs	r3, #0
 8000232:	73bb      	strb	r3, [r7, #14]
 8000234:	e001      	b.n	800023a <LED_init+0x2e>
    } else {
        GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000236:	2301      	movs	r3, #1
 8000238:	73bb      	strb	r3, [r7, #14]
    }

    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800023a:	2300      	movs	r3, #0
 800023c:	73fb      	strb	r3, [r7, #15]

    GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 800023e:	f107 0308 	add.w	r3, r7, #8
 8000242:	4619      	mov	r1, r3
 8000244:	4803      	ldr	r0, [pc, #12]	@ (8000254 <LED_init+0x48>)
 8000246:	f000 f8a4 	bl	8000392 <GPIO_Init>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020000 	.word	0x40020000

08000258 <Button_init>:

static void Button_init(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    RCC_AHB1PeriphClockCmd(BUTTON_RCC_CLOCK, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	2004      	movs	r0, #4
 8000262:	f000 f925 	bl	80004b0 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Pin = BUTTON_GPIO_PIN;
 8000266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800026a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800026c:	2300      	movs	r3, #0
 800026e:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000270:	2302      	movs	r3, #2
 8000272:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP; // USER button d√πng pull-up
 8000274:	2301      	movs	r3, #1
 8000276:	71fb      	strb	r3, [r7, #7]

    GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8000278:	463b      	mov	r3, r7
 800027a:	4619      	mov	r1, r3
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <Button_init+0x34>)
 800027e:	f000 f888 	bl	8000392 <GPIO_Init>
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40020800 	.word	0x40020800

08000290 <LED_Set>:

static void LED_Set(uint8_t state) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
    if (state == GPIO_PIN_SET)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d103      	bne.n	80002a8 <LED_Set+0x18>
        LED_GPIO_PORT->BSRRL = LED_GPIO_PIN;
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <LED_Set+0x2c>)
 80002a2:	2220      	movs	r2, #32
 80002a4:	831a      	strh	r2, [r3, #24]
    else
        LED_GPIO_PORT->BSRRH = LED_GPIO_PIN;
}
 80002a6:	e002      	b.n	80002ae <LED_Set+0x1e>
        LED_GPIO_PORT->BSRRH = LED_GPIO_PIN;
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <LED_Set+0x2c>)
 80002aa:	2220      	movs	r2, #32
 80002ac:	835a      	strh	r2, [r3, #26]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <Button_Read>:

static uint8_t Button_Read(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    return (BUTTON_GPIO_PORT->IDR & BUTTON_GPIO_PIN) ? HIGH : LOW;
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <Button_Read+0x20>)
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	bf14      	ite	ne
 80002d0:	2301      	movne	r3, #1
 80002d2:	2300      	moveq	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40020800 	.word	0x40020800

080002e4 <main>:

int main(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
    uint8_t led_state = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	71fb      	strb	r3, [r7, #7]
    uint8_t button_flag = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	71bb      	strb	r3, [r7, #6]
    uint32_t delay_after_release = 2000; // Th·ªùi gian delay sau khi th·∫£ n√∫t (2 gi√¢y)
 80002f2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80002f6:	603b      	str	r3, [r7, #0]

    LED_init(GPIO_OType_PP);  // Ho·∫∑c GPIO_OType_OD n·∫øu mu·ªën Open-Drain
 80002f8:	2000      	movs	r0, #0
 80002fa:	f7ff ff87 	bl	800020c <LED_init>
    Button_init();
 80002fe:	f7ff ffab 	bl	8000258 <Button_init>

    while (1) {
        // Ki·ªÉm tra n·∫øu n√∫t ƒë∆∞·ª£c nh·∫•n (ƒë√£ k√©o xu·ªëng GND)
        if (Button_Read() == BTN_PRESS) {
 8000302:	f7ff ffdd 	bl	80002c0 <Button_Read>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d105      	bne.n	8000318 <main+0x34>
            if (!button_flag) {
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d1f7      	bne.n	8000302 <main+0x1e>
                button_flag = 1; // ƒê√°nh d·∫•u l√† n√∫t ƒë√£ ƒë∆∞·ª£c nh·∫•n
 8000312:	2301      	movs	r3, #1
 8000314:	71bb      	strb	r3, [r7, #6]
 8000316:	e7f4      	b.n	8000302 <main+0x1e>
                // Kh√¥ng l√†m g√¨ ngay l·∫≠p t·ª©c khi n√∫t nh·∫•n
            }
        } else {
            if (button_flag) {
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f1      	beq.n	8000302 <main+0x1e>
                // N·∫øu n√∫t ƒë√£ ƒë∆∞·ª£c nh·∫•n v√† th·∫£ ra, b·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian delay
                button_flag = 0; // Reset l·∫°i flag
 800031e:	2300      	movs	r3, #0
 8000320:	71bb      	strb	r3, [r7, #6]

                // ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi thay ƒë·ªïi tr·∫°ng th√°i LED
                delay_ms(delay_after_release); // ƒê·ª£i 2 gi√¢y
 8000322:	6838      	ldr	r0, [r7, #0]
 8000324:	f7ff ff56 	bl	80001d4 <delay_ms>

                // Sau khi delay, thay ƒë·ªïi tr·∫°ng th√°i LED
                led_state = !led_state;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf0c      	ite	eq
 800032e:	2301      	moveq	r3, #1
 8000330:	2300      	movne	r3, #0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	71fb      	strb	r3, [r7, #7]
                LED_Set(led_state);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ffa9 	bl	8000290 <LED_Set>
        if (Button_Read() == BTN_PRESS) {
 800033e:	e7e0      	b.n	8000302 <main+0x1e>

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	@ (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	@ (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 f8bf 	bl	80004f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ffb7 	bl	80002e4 <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	08000558 	.word	0x08000558
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>

08000392 <GPIO_Init>:
 8000392:	b480      	push	{r7}
 8000394:	b087      	sub	sp, #28
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6039      	str	r1, [r7, #0]
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	e076      	b.n	800049c <GPIO_Init+0x10a>
 80003ae:	2201      	movs	r2, #1
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa02 f303 	lsl.w	r3, r2, r3
 80003b6:	613b      	str	r3, [r7, #16]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	693a      	ldr	r2, [r7, #16]
 80003be:	4013      	ands	r3, r2
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d165      	bne.n	8000496 <GPIO_Init+0x104>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	791b      	ldrb	r3, [r3, #4]
 80003e8:	4619      	mov	r1, r3
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d003      	beq.n	8000408 <GPIO_Init+0x76>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d12e      	bne.n	8000466 <GPIO_Init+0xd4>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	689a      	ldr	r2, [r3, #8]
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	2103      	movs	r1, #3
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43db      	mvns	r3, r3
 8000418:	401a      	ands	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	795b      	ldrb	r3, [r3, #5]
 8000426:	4619      	mov	r1, r3
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	431a      	orrs	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685a      	ldr	r2, [r3, #4]
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	b29b      	uxth	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	2301      	movs	r3, #1
 8000442:	408b      	lsls	r3, r1
 8000444:	43db      	mvns	r3, r3
 8000446:	401a      	ands	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	683a      	ldr	r2, [r7, #0]
 8000452:	7992      	ldrb	r2, [r2, #6]
 8000454:	4611      	mov	r1, r2
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	b292      	uxth	r2, r2
 800045a:	fa01 f202 	lsl.w	r2, r1, r2
 800045e:	b292      	uxth	r2, r2
 8000460:	431a      	orrs	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68da      	ldr	r2, [r3, #12]
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	b29b      	uxth	r3, r3
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	2103      	movs	r1, #3
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	43db      	mvns	r3, r3
 8000478:	401a      	ands	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68da      	ldr	r2, [r3, #12]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	79db      	ldrb	r3, [r3, #7]
 8000486:	4619      	mov	r1, r3
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	431a      	orrs	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	3301      	adds	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	2b0f      	cmp	r3, #15
 80004a0:	d985      	bls.n	80003ae <GPIO_Init+0x1c>
 80004a2:	bf00      	nop
 80004a4:	371c      	adds	r7, #28
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <RCC_AHB1PeriphClockCmd>:
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d006      	beq.n	80004d0 <RCC_AHB1PeriphClockCmd+0x20>
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80004c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c6:	4909      	ldr	r1, [pc, #36]	@ (80004ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	630b      	str	r3, [r1, #48]	@ 0x30
 80004ce:	e006      	b.n	80004de <RCC_AHB1PeriphClockCmd+0x2e>
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80004d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	43db      	mvns	r3, r3
 80004d8:	4904      	ldr	r1, [pc, #16]	@ (80004ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80004da:	4013      	ands	r3, r2
 80004dc:	630b      	str	r3, [r1, #48]	@ 0x30
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <__libc_init_array>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000528 <__libc_init_array+0x38>)
 80004f4:	4c0d      	ldr	r4, [pc, #52]	@ (800052c <__libc_init_array+0x3c>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	2600      	movs	r6, #0
 80004fc:	42a6      	cmp	r6, r4
 80004fe:	d109      	bne.n	8000514 <__libc_init_array+0x24>
 8000500:	4d0b      	ldr	r5, [pc, #44]	@ (8000530 <__libc_init_array+0x40>)
 8000502:	4c0c      	ldr	r4, [pc, #48]	@ (8000534 <__libc_init_array+0x44>)
 8000504:	f000 f818 	bl	8000538 <_init>
 8000508:	1b64      	subs	r4, r4, r5
 800050a:	10a4      	asrs	r4, r4, #2
 800050c:	2600      	movs	r6, #0
 800050e:	42a6      	cmp	r6, r4
 8000510:	d105      	bne.n	800051e <__libc_init_array+0x2e>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f855 3b04 	ldr.w	r3, [r5], #4
 8000518:	4798      	blx	r3
 800051a:	3601      	adds	r6, #1
 800051c:	e7ee      	b.n	80004fc <__libc_init_array+0xc>
 800051e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000522:	4798      	blx	r3
 8000524:	3601      	adds	r6, #1
 8000526:	e7f2      	b.n	800050e <__libc_init_array+0x1e>
 8000528:	08000550 	.word	0x08000550
 800052c:	08000550 	.word	0x08000550
 8000530:	08000550 	.word	0x08000550
 8000534:	08000554 	.word	0x08000554

08000538 <_init>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr

08000544 <_fini>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr
